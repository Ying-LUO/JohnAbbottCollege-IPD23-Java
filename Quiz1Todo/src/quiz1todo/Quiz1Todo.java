/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package quiz1todo;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author YingLuo
 * @since 2020-Nov-17
 * @version 1.0
 * 
 */
public class Quiz1Todo extends javax.swing.JFrame {
    
    DefaultListModel<Todo> modelListTodo = new DefaultListModel<>();

    /**
     * Creates new form Quiz1
     */
    public Quiz1Todo() {
        initComponents();
        loadDataFromFile();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstTodo = new javax.swing.JList<>();
        lblTask = new javax.swing.JLabel();
        tfTask = new javax.swing.JTextField();
        lblDifficulty = new javax.swing.JLabel();
        tfDifficulty = new javax.swing.JTextField();
        sliderDifficulty = new javax.swing.JSlider();
        lblDueDate = new javax.swing.JLabel();
        tfDueDate = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();
        cmbStatus = new javax.swing.JComboBox<>();
        btExport = new javax.swing.JButton();
        btAdd = new javax.swing.JButton();
        btUpdate = new javax.swing.JButton();
        btDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Quiz1Todos");
        setResizable(false);

        lstTodo.setModel(modelListTodo);
        lstTodo.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstTodo.setToolTipText("");
        lstTodo.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstTodoValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstTodo);

        lblTask.setText("Task");

        lblDifficulty.setText("Difficulty");

        tfDifficulty.setText("5");
        tfDifficulty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfDifficultyKeyReleased(evt);
            }
        });

        sliderDifficulty.setMajorTickSpacing(1);
        sliderDifficulty.setMaximum(5);
        sliderDifficulty.setMinimum(1);
        sliderDifficulty.setPaintLabels(true);
        sliderDifficulty.setPaintTicks(true);
        sliderDifficulty.setSnapToTicks(true);
        sliderDifficulty.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderDifficultyStateChanged(evt);
            }
        });

        lblDueDate.setText("Due Date");

        tfDueDate.setText("yyyy/mm/dd");

        lblStatus.setText("Status");

        cmbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pending", "Done", "Delegated" }));

        btExport.setText("Export all to File");
        btExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExportActionPerformed(evt);
            }
        });

        btAdd.setText("Add");
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });

        btUpdate.setText("Update");
        btUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUpdateActionPerformed(evt);
            }
        });

        btDelete.setText("Delete");
        btDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblDueDate)
                            .addComponent(lblStatus)
                            .addComponent(lblTask)
                            .addComponent(lblDifficulty)))
                    .addComponent(btExport))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btAdd)
                        .addGap(34, 34, 34)
                        .addComponent(btDelete)
                        .addGap(18, 18, 18)
                        .addComponent(btUpdate))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(tfTask, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(tfDifficulty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(cmbStatus, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tfDueDate, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(sliderDifficulty, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)))))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTask)
                            .addComponent(tfTask, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblDifficulty)
                                .addComponent(tfDifficulty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(sliderDifficulty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDueDate)
                            .addComponent(tfDueDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStatus)
                            .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btExport)
                    .addComponent(btAdd)
                    .addComponent(btUpdate)
                    .addComponent(btDelete))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
        // TODO add your handling code here:
        String task = tfTask.getText();
        ArrayList<String> errorsList = new ArrayList<>();
        if (!task.matches("[-/() \\.%A-Za-z0-9]{1,100}")) {
            errorsList.add("Task must be 1-100 characters long, made up only of "
                    + "uppercase/lowercase letters, numbers, spaces, dot, dash, slash, parenthesis, percentage");
        }
        int difficulty = sliderDifficulty.getValue();
        
        Date dueDate = null;
        try {
            dueDate = Todo.dateFormat.parse(tfDueDate.getText());
            if (dueDate.before(Todo.dateFormat.parse("1900-01-01"))
                    || dueDate.after(Todo.dateFormat.parse("2100-01-01"))) {
                errorsList.add("Year must be between 1900 and 2100");
            }
        } catch (ParseException ex) {
            errorsList.add("Due Date must be in yyyy-mm-dd format");
        }
        
        Todo.Status status = Todo.Status.valueOf(cmbStatus.getSelectedItem().toString());
        
        if (errorsList.isEmpty()) { // success
            Todo todo = new Todo(task, difficulty, dueDate, status);
            modelListTodo.addElement(todo);
            // TODO: reset inputs
        } else { // show errors to the user
            JOptionPane.showMessageDialog(this, String.join("\n", errorsList),
                    "Input errors", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btAddActionPerformed

    private void btDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteActionPerformed
        // TODO add your handling code here:
        Todo todo = lstTodo.getSelectedValue();
        if (todo == null) { // this should never happen because button is disabled if no selection
            return;
        }
        int decision = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to delete this item?\n" + todo,
                "Confirm deletion",
                JOptionPane.OK_CANCEL_OPTION);
        if (decision == JOptionPane.OK_OPTION) {
            modelListTodo.removeElement(todo);
        }
    }//GEN-LAST:event_btDeleteActionPerformed

    private void btUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUpdateActionPerformed
        // TODO add your handling code here:
        Todo todo = lstTodo.getSelectedValue();
        if (todo == null) { // this should never happen because button is disabled if no selection
            return;
        }
        
        todo.task = tfTask.getText();
        
        if (!todo.task.matches("[-/() \\.%A-Za-z0-9]{1,100}")) {
            JOptionPane.showMessageDialog(this, "Task must be 1-100 characters long, made up only of "
                    + "uppercase/lowercase letters, numbers, spaces, dot, dash, slash, parenthesis, percentage");
        }
        
        todo.difficulty = sliderDifficulty.getValue();
        
        try {
            todo.dueDate = Todo.dateFormat.parse(tfDueDate.getText());
            if (todo.dueDate.before(Todo.dateFormat.parse("1900-01-01"))
                    || todo.dueDate.after(Todo.dateFormat.parse("2100-01-01"))) {
                JOptionPane.showMessageDialog(this,"Year must be between 1900 and 2100");
            }
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Due Date format is wrong");
        }
        todo.status = Todo.Status.valueOf(cmbStatus.getSelectedItem().toString());
        // force JList to re-read data
        lstTodo.setModel(modelListTodo);
    }//GEN-LAST:event_btUpdateActionPerformed

    private void sliderDifficultyStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderDifficultyStateChanged
        // TODO add your handling code here:
        int value = sliderDifficulty.getValue();
        tfDifficulty.setText(value + "");
    }//GEN-LAST:event_sliderDifficultyStateChanged

    final int DIFFICULTY_DEFAULT = 3;
    
    private void tfDifficultyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfDifficultyKeyReleased
        // TODO add your handling code here:
        try {
            int value = Integer.parseInt(tfDifficulty.getText());
            int max = sliderDifficulty.getMaximum();
            int min = sliderDifficulty.getMinimum();
            // make sure value is within min/max range and adjust if needed
            value = value > max ? max : value;
            value = value < min ? min : value;
            sliderDifficulty.setValue(value);
        } catch (NumberFormatException ex) {
            sliderDifficulty.setValue(DIFFICULTY_DEFAULT);
            tfDifficulty.setText(DIFFICULTY_DEFAULT + "");
        }
    }//GEN-LAST:event_tfDifficultyKeyReleased

    private void btExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExportActionPerformed
        // TODO add your handling code here:
        saveDataToFile();
    }//GEN-LAST:event_btExportActionPerformed

    private void lstTodoValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstTodoValueChanged
        // TODO add your handling code here:
        Todo todo = lstTodo.getSelectedValue();
        if (todo != null) {
            tfTask.setText(todo.task);
            sliderDifficulty.setValue(todo.difficulty);
            tfDueDate.setText(Todo.dateFormat.format(todo.dueDate));
            cmbStatus.getModel().setSelectedItem(todo.status);
            btDelete.setEnabled(true);
            btUpdate.setEnabled(true);
        } else {
            btDelete.setEnabled(false);
            btUpdate.setEnabled(false);
        }
    }//GEN-LAST:event_lstTodoValueChanged

    final String DATA_FILENAME = "todos.txt";
    
    // called in constructor to load data from "data.txt"
    void loadDataFromFile() {
        
        ArrayList<String> errorsList = new ArrayList<>();
        int lineNo = 0;
        try (Scanner fileInput = new Scanner(new File(DATA_FILENAME))) {
            while (fileInput.hasNextLine()) {
                lineNo++;
                String line = fileInput.nextLine();
                String[] dataStr = line.split(";");
                if (dataStr.length != 4) {
                    errorsList.add("Invalid data structure in line: " + lineNo);
                    continue; // try and read the next line
                }
                
                String task = dataStr[0];
                int difficulty = 0;
                try {
                    difficulty = Integer.parseInt(dataStr[1]);
                } catch (NumberFormatException ex) {
                    errorsList.add("Invalid difficulty in line: " + lineNo);
                    continue; // try and read the next line
                }
                Date dueDate = null;
                try {
                    dueDate = Todo.dateFormat.parse(dataStr[2]);
                } catch (ParseException ex) {
                    errorsList.add("Due Date format invalid in line: " + lineNo);
                    continue; // try and read the next line
                }
                Todo.Status status = Todo.Status.valueOf("Pending");
                try {
                    status = Todo.Status.valueOf(dataStr[3]);
                } catch (IllegalArgumentException ex) {
                    
                    errorsList.add("Status format invalid in line: " + lineNo);
                    continue; // try and read the next line
                }
                
                
                // TODO: validate the values themselves - best use setters in the future
                Todo todo = new Todo(task, difficulty, dueDate, status);
                modelListTodo.addElement(todo);
            }
        } catch (IOException ex) {
            System.out.println("Error reading file: " + ex.getMessage());
        }
        if (!errorsList.isEmpty()) { // show errors to the user
            JOptionPane.showMessageDialog(this, String.join("\n", errorsList.get(0)),
                    "Errors reading data file", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    final String SUFFIX_DEFAULT = ".txt";
    
    void saveDataToFile() {
        
        fileChooser.setFileFilter(new FileNameExtensionFilter("Text documents (*.txt)", "txt"));
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            
            File chosenFile = fileChooser.getSelectedFile();
            
            if(!fileChooser.getSelectedFile().getAbsolutePath().endsWith(SUFFIX_DEFAULT)){
                chosenFile = new File(fileChooser.getSelectedFile() + SUFFIX_DEFAULT);
            }
            
            try (PrintWriter fileOutput = new PrintWriter(chosenFile)) {
                
                for (int i = 0; i < modelListTodo.size(); i++) {
                    Todo todo = modelListTodo.getElementAt(i);
                    String dataLine = String.format("%s;%d;%s;%s", 
                                                    todo.task,
                                                    todo.difficulty, 
                                                    Todo.dateFormat.format(todo.dueDate),
                                                    todo.status);
                    fileOutput.println(dataLine);
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error saving data to file:\n" + ex.getMessage(),
                        "File error", JOptionPane.ERROR_MESSAGE);
            }

        }
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Quiz1Todo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Quiz1Todo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Quiz1Todo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Quiz1Todo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Quiz1Todo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btDelete;
    private javax.swing.JButton btExport;
    private javax.swing.JButton btUpdate;
    private javax.swing.JComboBox<String> cmbStatus;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDifficulty;
    private javax.swing.JLabel lblDueDate;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTask;
    private javax.swing.JList<Todo> lstTodo;
    private javax.swing.JSlider sliderDifficulty;
    private javax.swing.JTextField tfDifficulty;
    private javax.swing.JTextField tfDueDate;
    private javax.swing.JTextField tfTask;
    // End of variables declaration//GEN-END:variables
}
