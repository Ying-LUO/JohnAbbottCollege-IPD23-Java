/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package day03peopleadvanced;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.Scanner;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author YingLuo
 */
public class Day03PeopleAdvanced extends javax.swing.JFrame {
    
    DefaultListModel<Person> modelPeopleList = new DefaultListModel<>();
    
    private void loadDataFromFile(){
        
        ArrayList<String>  errorsList = new ArrayList<>();
        int lineNo = 0;
        try (Scanner fileInput = new Scanner(new File(DATA_FILENAME))) {
            while (fileInput.hasNextLine()) {
                
                /*
                String name = fileInput.next();
                int heightCm = Integer.parseInt(fileInput.next());
                Date dob = null;
                try {
                    dob = Person.dateFormat.parse(fileInput.next());
                   }
                   catch (Exception e) {
                        JOptionPane.showMessageDialog(this, "Date of Birth parsing error");
                   }
                
                Person person = new Person(name, heightCm, dob);
                modelPeopleList.addElement(person);
                */
                lineNo++;
                String line = fileInput.nextLine();
                String []dataStr = line.split(";");
                if(dataStr.length != 3){
                    errorsList.add("Invalid data in line: " + lineNo);
                    continue;
                }
                String name  = dataStr[0];
                int heightCm = 0;
                Date dob = null;
                try{
                    heightCm = Integer.parseInt(dataStr[1]);
                }catch(NumberFormatException ex){
                    errorsList.add("Invalid height in line: " + lineNo);
                    continue;
                }
                try{
                    dob = Person.dateFormat.parse(dataStr[2]);
                }catch(ParseException ex){
                    errorsList.add("Invalid Date of Birth in line: " + lineNo);
                    continue;
                }
                
                Person person = new Person(name, heightCm, dob);
                modelPeopleList.addElement(person);
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Unable to read from file:\n" + ex.getMessage(),
                    "Fatal error - file access error:", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }
        
        if(!errorsList.isEmpty()){
            JOptionPane.showMessageDialog(this, errorsList.toString());
        }
         
    }
    
    final static String DATA_FILENAME = "data.txt";
    
    private void saveDataToFile(){
        
        ArrayList<Person> personList = Collections.list(modelPeopleList.elements());
        
        String line = "";
        
        // FileWriter's 2nd parameter 'true' means to append instead of overriding
        try (PrintWriter fileOutput = new PrintWriter(new FileWriter(new File(DATA_FILENAME), true))) {
            
            for(int i=0; i<personList.size(); i++){
                
                line += personList.get(i).toString() + "\r\n";
                fileOutput.println(line);
            
            }
                      
            JOptionPane.showMessageDialog(this, "Person List", "Success", JOptionPane.INFORMATION_MESSAGE);
            personList.clear();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Unable to write to file:\n" + ex.getMessage(),
                    "Error - file access error:", JOptionPane.ERROR_MESSAGE);
        }
        
    }

    /**
     * Creates new form Day03PeopleAdvanced
     */
    public Day03PeopleAdvanced() {
        initComponents();
        loadDataFromFile();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstPerson = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        slHeight = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        tfDOB = new javax.swing.JTextField();
        btAdd = new javax.swing.JButton();
        btDelete = new javax.swing.JButton();
        btUpdate = new javax.swing.JButton();
        tfHeight = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jButton1.setText("Filter");

        jLabel1.setText("Name:");

        lstPerson.setModel(modelPeopleList);
        lstPerson.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstPerson.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstPersonValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstPerson);

        jLabel2.setText("Height(cm):");

        slHeight.setMajorTickSpacing(10);
        slHeight.setMaximum(250);
        slHeight.setMinimum(170);
        slHeight.setMinorTickSpacing(1);
        slHeight.setPaintLabels(true);
        slHeight.setPaintTicks(true);
        slHeight.setSnapToTicks(true);
        slHeight.setToolTipText("(cm)");
        slHeight.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slHeightStateChanged(evt);
            }
        });

        jLabel3.setText("Date of Birth(yyyy/mm/dd):");

        btAdd.setText("Add Person");
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });

        btDelete.setText("Delete Person");
        btDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteActionPerformed(evt);
            }
        });

        btUpdate.setText("Update Person");
        btUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUpdateActionPerformed(evt);
            }
        });

        tfHeight.setText("170");
        tfHeight.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                tfHeightInputMethodTextChanged(evt);
            }
        });
        tfHeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfHeightActionPerformed(evt);
            }
        });
        tfHeight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfHeightKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btAdd)
                        .addGap(43, 43, 43)
                        .addComponent(btDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                        .addComponent(btUpdate))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(tfHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(slHeight, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE)
                            .addComponent(tfDOB, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfName))))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel1)
                    .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(tfHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(slHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(tfDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btAdd)
                            .addComponent(btDelete)
                            .addComponent(btUpdate))))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    ArrayList<String> errorsList;
    
    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
        // TODO add your handling code here:
        String name = tfName.getText();
        
        if(!name.matches("[-/() \\.A-Za-z0-9]{1,100}")){
            errorsList.add("Name must be 1-100 charactoers long, made up only of upper case and lower case letters, numbers. spaces, dot, slash");
        }
        
        int heightCm = slHeight.getValue();
        
        Date dob = null;
        
        try {
            dob = Person.dateFormat.parse(tfDOB.getText());
            
            if((dob.before(Person.dateFormat.parse("1900/01/01"))) || (dob.after(Person.dateFormat.parse("2100/01/01")))){
                errorsList.add("Date of Birth should be in range(1900/01/01 -- 2100/01/01)");
            }
            
            if(errorsList.size() == 0){
                Person person = new Person(name, heightCm, dob);
                modelPeopleList.addElement(person);
            }
        
           }
           catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Date of Birth parsing error");
           }
        
        
    }//GEN-LAST:event_btAddActionPerformed

    private void tfHeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfHeightActionPerformed
        // TODO add your handling code here:\
    }//GEN-LAST:event_tfHeightActionPerformed

    private void btDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteActionPerformed
        // TODO add your handling code here:
        int index = lstPerson.getSelectedIndex();
        // or get person directly
        // Person person = lstPerson.getSelectedValue();
        // if (person == null) {
        //                          return;
        //                  }
        if (index == -1) {
            JOptionPane.showMessageDialog(this, "Select Person to delete first", "Input error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        int decision = JOptionPane.showConfirmDialog(this, "Are you sure to delete?"+modelPeopleList.get(index).toString(), "Confirm deletion", JOptionPane.OK_CANCEL_OPTION);
        
        if(decision == JOptionPane.OK_OPTION){
            modelPeopleList.removeElementAt(index);
        }
        
    }//GEN-LAST:event_btDeleteActionPerformed

    private void btUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUpdateActionPerformed
        // TODO add your handling code here:
        int index = lstPerson.getSelectedIndex();
        if (index == -1) {
            JOptionPane.showMessageDialog(this, "Select Person to update first", "Input error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        modelPeopleList.get(index).setName(tfName.getText());
        modelPeopleList.get(index).setHeightCm(slHeight.getValue());
        try {
              modelPeopleList.get(index).setDateOfBirth(Person.dateFormat.parse(tfDOB.getText()));
                   }
                   catch (ParseException e) {
                        JOptionPane.showMessageDialog(this, "Date of Birth parsing error");
                   }
        lstPerson.setModel(modelPeopleList);
    }//GEN-LAST:event_btUpdateActionPerformed

    private void tfHeightInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_tfHeightInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_tfHeightInputMethodTextChanged

    private void tfHeightKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfHeightKeyReleased
        // TODO add your handling code here:
        tfHeight.setText(slHeight.getValue()+"cm");
    }//GEN-LAST:event_tfHeightKeyReleased

    final static int HEIGHT_DEFAULT = 170;
    
    private void slHeightStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slHeightStateChanged
        // TODO add your handling code here:
        try{
            int value = Integer.parseInt(tfHeight.getText());
            int max = slHeight.getMaximum();
            int min = slHeight.getMinimum();
            // make sure value is within the range and adjust if needed
            value = value > max? max : value;
            value = value < min? min : value;
            slHeight.setValue(value);
        }catch(NumberFormatException ex){
            slHeight.setValue(HEIGHT_DEFAULT);
            tfHeight.setText(HEIGHT_DEFAULT + "cm");
        }
        
    }//GEN-LAST:event_slHeightStateChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        saveDataToFile();
    }//GEN-LAST:event_formWindowClosing

    private void lstPersonValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstPersonValueChanged
        // TODO add your handling code here:
        Person person = lstPerson.getSelectedValue();
        if (person != null){
            tfName.setText(person.name);
            slHeight.setValue(person.heightCm);
            tfDOB.setText(Person.dateFormat.format(person.dateOfBirth));
        }else {
            btDelete.setEnabled(false);
            btUpdate.setEnabled(false);
        }
        
    }//GEN-LAST:event_lstPersonValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Day03PeopleAdvanced.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Day03PeopleAdvanced.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Day03PeopleAdvanced.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Day03PeopleAdvanced.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Day03PeopleAdvanced().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btDelete;
    private javax.swing.JButton btUpdate;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JList<Person> lstPerson;
    private javax.swing.JSlider slHeight;
    private javax.swing.JTextField tfDOB;
    private javax.swing.JTextField tfHeight;
    private javax.swing.JTextField tfName;
    // End of variables declaration//GEN-END:variables
}
